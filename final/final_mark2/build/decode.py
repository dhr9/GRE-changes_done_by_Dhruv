from final_mark2.common.string_handling import *

#----------------------------------------------------------------------------
'''

TAKES THE MEANING(CLUE) FORMAT STRING AS INPUT AND RETURNS THE MEANING AND 
CLUE SEPERATED, IN A LIST.

'''
def decode_meaning_and_clue(string) : 

	if(string[len(string)-1] != '\n') : 
		string += '\n'

	meaning = []
	clue = []
	string_ = []
	i = 0
	while(i < len(string)) : 
		data = record_until_character(string,'\n',i)
		string_.append(data[0])
		i += data[1]
		i += 1

	i = 0
	for i in range(len(string_)) : 
		meaning_ = ''
		clue_ = ''
		if('(' not in string_[i]) : 
			meaning_ = string_[i]
		else : 
			data = record_until_character(string_[i],'(',0)
			meaning_  = data[0]
			data = record_until_character(string_[i],')',data[1]+1)
			clue_ = data[0]
		meaning.append(meaning_)
		clue.append(clue_)

	return([meaning,clue])

#----------------------------------------------------------------------------

'''

THE LIST GENERATED BY THE run() FUNCTION OF THE buile_list.py MODULE CONSISTS OF 
A OTHERS LIST. 
THIS LIST MAY CONTAIN WORDS WITH DIFFERENT PARTS OF SPEECH BUT SAME MEANING AS THE 
WORD WHOSE PART THIS LIST IS.
THIS CODE GENERATES NEW WORDS FOR THIS DIFFERENT PARTS OF SPEECH WORDS AND APPENDS 
THESE TO THE ORIGINAL LIST

'''

def search_list_others_to_add_other_words_to_list(l_) : 
	l = []
	for i in range(len(l_)) : 
		l.append(l_[i])
	keyword_array = ['noun','verb','transitive verb','adverb','adjective']
	for i in range(len(l)) : 
		others = l[i][7]
		for j in range(len(others)) : 
			words_list = words_from_string(others[j])
			for k in range(len(words_list)) : 
				if(caps_to_small(words_list[k]) in keyword_array) : 
					new_word = add_word_to_list(l,i,j)
					l.append(new_word)
					break
	print('done adding other words to list')
	return l

def add_word_to_list(l,i,j) : 
	keyword_array = ['noun','verb','transitive verb','adverb','adjective']
	others = l[i][7]
	words_list = words_from_string(others[j])
	new_word = []
	for k in range(len(l[i])) : 
		new_word.append(l[i][k])
	new_word[7] = []
	word = ''
	figure_of_speech = ''
	for k in range(len(words_list)) : 
		if(caps_to_small(words_list[k]) in keyword_array) : 
			figure_of_speech = words_list[k]
		else : 
			word = words_list[k]
	new_word[0] = []
	new_word[0].append(word)
	new_word[1] = []
	new_word[1].append(figure_of_speech)
	others = l[i][7]
	new_others = []
	new_word[7].append('{0}({1})'.format(l[i][0][0],l[i][1][0]))

	for k in range(len(others)) : 
		if(word not in words_from_string(others[k])) : 
			new_word[7].append(others[k])
	return(new_word)

#----------------------------------------------------------------------------
